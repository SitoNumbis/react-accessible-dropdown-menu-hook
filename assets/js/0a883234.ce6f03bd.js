(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{68:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return b})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return l}));var o=n(3),a=n(7),r=(n(0),n(93)),i={title:"Return object"},b={unversionedId:"design/return-object",id:"design/return-object",isDocsHomePage:!1,title:"Return object",description:"This Hook returns an object of the following shape:",source:"@site/docs/design/return-object.md",slug:"/design/return-object",permalink:"/react-accessible-dropdown-menu-hook/docs/design/return-object",editUrl:"https://github.com/sparksuite/react-accessible-dropdown-menu-hook/edit/master/website/docs/design/return-object.md",version:"current",sidebar:"default",previous:{title:"Using",permalink:"/react-accessible-dropdown-menu-hook/docs/getting-started/using"},next:{title:"Accessibility",permalink:"/react-accessible-dropdown-menu-hook/docs/design/accessibility"}},c=[],s={toc:c};function l(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(o.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"This Hook returns an object of the following shape:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts"},"{\n    buttonProps: {\n        onKeyDown: (e: React.KeyboardEvent | React.MouseEvent) => void;\n        onClick: (e: React.KeyboardEvent | React.MouseEvent) => void;\n        tabIndex: 0;\n        ref: React.RefObject<HTMLButtonElement>;\n        role: 'button';\n        'aria-haspopup': true;\n        'aria-expanded': boolean;\n    };\n    itemProps: [\n        {\n            onKeyDown: (e: React.KeyboardEvent<HTMLAnchorElement>) => void;\n            tabIndex: -1;\n            role: 'menuitem';\n            ref: React.RefObject<HTMLAnchorElement>;\n        };\n        ...\n    ];\n    isOpen: boolean;\n    setIsOpen: (newValue: boolean) => void;\n}\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"buttonProps:")," An object meant to be spread as properties on a ",Object(r.b)("inlineCode",{parentName:"li"},"<button />")," element.",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"onKeyDown:")," A function which manages the behavior of your dropdown menu when a key is pressed while focused on the menu button."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"onClick:")," The same function as ",Object(r.b)("inlineCode",{parentName:"li"},"onKeyDown()"),", but its behavior differs somewhat for click events."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"tabIndex:")," Sets the tab index property of the ",Object(r.b)("inlineCode",{parentName:"li"},"<button />")," element."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"ref:")," A React ref applied to the ",Object(r.b)("inlineCode",{parentName:"li"},"<button />")," element, used to manage focus."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"role:")," A role property in accordance with WAI-ARIA guidelines."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"aria-haspopup:")," An ARIA attribute indicating this button has a related menu element."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"aria-expanded:")," An ARIA attribute indicating whether the menu is currently open."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"itemProps:")," An array of objects meant to be spread as properties on ",Object(r.b)("inlineCode",{parentName:"li"},"<a />")," elements that serve as menu items in your dropdown.",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"onKeyDown:")," A function which manages the behavior of your dropdown menu when a key is pressed while focused on a menu item."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"tabIndex:")," Sets the tab index property to ",Object(r.b)("inlineCode",{parentName:"li"},"-1")," to prevent the browser\u2019s native focusing logic. Focus is managed programatically by this Hook."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"role:")," A role property in accordance with WAI-ARIA guidelines. "),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"ref:")," A React ref applied to each menu item, used to manage focus."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"isOpen:")," A boolean value indicating if the menu is open or closed. The developer should use this value to make the menu visible or not."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"setIsOpen:")," A function useful for allowing the developer to programmatically open/close the menu.")))}l.isMDXComponent=!0}}]);