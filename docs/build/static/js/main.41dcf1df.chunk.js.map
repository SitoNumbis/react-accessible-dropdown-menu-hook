{"version":3,"sources":["app.tsx","../../src/use-dropdown-menu.ts","index.tsx"],"names":["App","useDropdownMenu","buttonProps","itemProps","isOpen","className","type","id","tabIndex","style","display","role","onClick","href","ReactDOM","render","document","getElementById"],"mappings":"mLAMA,IA8BeA,EA9BO,WAAO,IAAD,ECFd,SAA0B,GAAiB,MAE5B,oBAAkB,GAFU,mBAEjD,EAFiD,KAEzC,EAFyC,KAGlD,EAAoB,iBAAsB,MAC1C,EAAW,kBAAO,GAGlB,EAAY,iBAA0B,MACtC,EAAW,iBAAO,YAAI,MAAM,IAAY,KAAI,kBAAM,0BAOlD,EAAY,SAAC,G,MACd,EAAc,QAAU,EACO,QAAnC,IAAS,QAAQ,GAAW,eAAO,SAAE,SAIpC,OAAF,YAAE,EAAQ,WAEJ,EAAS,QAAQ,GAAG,SAAY,EAAU,UAK3C,EAAS,QACN,EAAG,SAAU,EAKhB,IACH,EAAS,QAAQ,GAAG,QAAQ,QACtB,EAAI,OAET,CAAC,IAGF,IAAI,EAAiB,SAAC,GAEnB,GAhCmB,SAAC,GAAD,YACY,IAAlC,EAA0B,IA+BvB,CAAgB,GAAI,KACf,EAAQ,EAAR,IAEM,QAAR,GAAyB,UAAR,GACd,EAAN,iBAGS,UAAR,GAA2B,MAAR,EACtB,GAAU,GACQ,QAAR,GACF,GAAE,QAGL,GAAK,IAKP,EAAe,SAAC,G,MAEjB,EAAgB,EAAkB,QAG9B,EAAQ,EAAR,IAQJ,GALU,QAAR,GAAyB,UAAR,GAA2B,UAAR,GACnC,EAAJ,iBAIS,WAAR,EAGH,OAFA,GAAU,QACO,QAAjB,IAAU,eAAO,SAAE,SAED,QAAR,EAGQ,UAAR,GAMW,OAAlB,IACS,YAAR,EACH,GAAiB,EACC,cAAR,IACV,GAAiB,GAGd,EAAgB,EAAS,QAAQ,OAAS,EAC7C,EAAgB,EACN,EAAgB,IAC1B,EAAgB,EAAS,QAAQ,OAAS,IAKtB,OAAlB,GACH,EAAU,IArBV,EAAE,cAAc,QAHhB,GAAU,IA+CZ,MAAO,CAlBwG,CAC9G,UAAW,EACX,QAAS,EACT,SAAU,EACV,IAAK,EACL,KAAM,SACN,iBAAiB,EACjB,gBAAiB,GAGA,YAAI,MAAM,IAAY,KAAI,SAAC,EAAQ,GAAT,MAAoB,CAC/D,UAAW,EACX,UAAW,EACX,KAAM,WACN,IAAK,EAAS,QAAQ,OAIS,GD3HSC,CAAgB,GAD9B,mBACpBC,EADoB,KACPC,EADO,KACIC,EADJ,KAG3B,OACC,yBAAKC,UAAU,OACd,0CAAQC,KAAK,UAAaJ,EAA1B,CAAuCK,GAAG,aAAaC,SAAU,IAAjE,WAIA,yBAAKC,MAAO,CAAEC,QAASN,EAAS,QAAU,QAAUO,KAAK,OAAOJ,GAAG,QAClE,qCAAGE,MAAO,CAAEC,QAAS,UAAeP,EAAU,GAA9C,CAAkDS,QAAS,kBAAM,MAAML,GAAG,cAA1E,UAIA,qCAAGE,MAAO,CAAEC,QAAS,SAAWG,KAAK,uBAA0BV,EAAU,GAAzE,CAA6EI,GAAG,cAAhF,UAIA,qCAAGE,MAAO,CAAEC,QAAS,SAAWG,KAAK,uBAA0BV,EAAU,GAAzE,CAA6EI,GAAG,cAAhF,WAKD,4BAAQD,KAAK,SAASC,GAAG,eAAeC,SAAU,GAAlD,oBEvBHM,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.41dcf1df.chunk.js","sourcesContent":["// Imports\nimport React from 'react';\nimport './app.css';\nimport useDropdownMenu from 'react-accessible-dropdown-menu-hook';\n\n// Functional component\nconst App: React.FC = () => {\n\tconst [buttonProps, itemProps, isOpen] = useDropdownMenu(3);\n\n\treturn (\n\t\t<div className='app'>\n\t\t\t<button type='button' {...buttonProps} id='menubutton' tabIndex={0}>\n\t\t\t\tPrimary\n\t\t\t</button>\n\n\t\t\t<div style={{ display: isOpen ? 'block' : 'none' }} role='menu' id='menu'>\n\t\t\t\t<a style={{ display: 'block' }} {...itemProps[0]} onClick={() => null} id='menuitem1'>\n\t\t\t\t\tItem 1\n\t\t\t\t</a>\n\n\t\t\t\t<a style={{ display: 'block' }} href='https://example.com' {...itemProps[1]} id='menuitem2'>\n\t\t\t\t\tItem 2\n\t\t\t\t</a>\n\n\t\t\t\t<a style={{ display: 'block' }} href='https://example.com' {...itemProps[2]} id='menuitem3'>\n\t\t\t\t\tItem 3\n\t\t\t\t</a>\n\t\t\t</div>\n\n\t\t\t<button type='button' id='secondbutton' tabIndex={0}>\n\t\t\t\tAnother Button\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import { useState, useRef, createRef, useEffect } from 'react';\nexport default function useDropdownMenu(itemCount) {\n    const [isOpen, setIsOpen] = useState(false);\n    const currentFocusIndex = useRef(null);\n    const firstRun = useRef(true);\n    const buttonRef = useRef(null);\n    const itemRefs = useRef([...Array(itemCount)].map(() => createRef()));\n    const isKeyboardEvent = (e) => e.key !== undefined;\n    const moveFocus = (itemIndex) => {\n        var _a;\n        currentFocusIndex.current = itemIndex;\n        (_a = itemRefs.current[itemIndex].current) === null || _a === void 0 ? void 0 : _a.focus();\n    };\n    useEffect(() => {\n        if (!itemRefs.current[0].current || !buttonRef.current) {\n            return;\n        }\n        if (firstRun.current) {\n            firstRun.current = false;\n            return;\n        }\n        if (isOpen) {\n            itemRefs.current[0].current.focus();\n            moveFocus(0);\n        }\n    }, [isOpen]);\n    const buttonListener = (e) => {\n        if (isKeyboardEvent(e)) {\n            const { key } = e;\n            if (!(key === 'Tab' || key === 'Shift')) {\n                e.preventDefault();\n            }\n            if (key === 'Enter' || key === ' ') {\n                setIsOpen(true);\n            }\n            else if (key === 'Tab') {\n                setIsOpen(false);\n            }\n        }\n        else {\n            setIsOpen(!isOpen);\n        }\n    };\n    const itemListener = (e) => {\n        var _a;\n        let newFocusIndex = currentFocusIndex.current;\n        const { key } = e;\n        if (!(key === 'Tab' || key === 'Shift' || key === 'Enter')) {\n            e.preventDefault();\n        }\n        if (key === 'Escape') {\n            setIsOpen(false);\n            (_a = buttonRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n            return;\n        }\n        else if (key === 'Tab') {\n            setIsOpen(false);\n            return;\n        }\n        else if (key === 'Enter') {\n            e.currentTarget.click();\n            return;\n        }\n        if (newFocusIndex !== null) {\n            if (key === 'ArrowUp') {\n                newFocusIndex -= 1;\n            }\n            else if (key === 'ArrowDown') {\n                newFocusIndex += 1;\n            }\n            if (newFocusIndex > itemRefs.current.length - 1) {\n                newFocusIndex = 0;\n            }\n            else if (newFocusIndex < 0) {\n                newFocusIndex = itemRefs.current.length - 1;\n            }\n        }\n        if (newFocusIndex !== null) {\n            moveFocus(newFocusIndex);\n        }\n    };\n    const buttonProps = {\n        onKeyDown: buttonListener,\n        onClick: buttonListener,\n        tabIndex: 0,\n        ref: buttonRef,\n        role: 'button',\n        'aria-haspopup': true,\n        'aria-expanded': isOpen,\n    };\n    const itemProps = [...Array(itemCount)].map((ignore, index) => ({\n        onKeyDown: itemListener,\n        tabIndex: -1,\n        role: 'menuitem',\n        ref: itemRefs.current[index],\n    }));\n    return [buttonProps, itemProps, isOpen];\n}\n//# sourceMappingURL=use-dropdown-menu.js.map","// Imports\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\n\n// Render\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}